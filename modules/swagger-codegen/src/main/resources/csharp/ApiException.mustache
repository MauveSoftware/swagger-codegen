{{>partial_header}}
using System;
using System.Runtime.Serialization;

namespace {{packageName}}.Client
{
    /// <summary>
    /// API Exception
    /// </summary>
    [Serializable]
    {{>visibility}} class ApiException : Exception
    {
        /// <summary>
        /// Gets or sets the error code (HTTP status code)
        /// </summary>
        /// <value>The error code (HTTP status code).</value>
        public int ErrorCode { get; set; }

        /// <summary>
        /// Gets or sets the error content (body json object)
        /// </summary>
        /// <value>The error content (Http response body).</value>
        public string ErrorContent { get; private set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiException"/> class.
        /// </summary>
        public ApiException() {}

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiException"/> class.
        /// </summary>
        /// <param name="errorCode">HTTP status code.</param>
        /// <param name="message">Error message.</param>
        public ApiException(int errorCode, string message) : base(message)
        {
            this.ErrorCode = errorCode;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiException"/> class.
        /// </summary>
        /// <param name="errorCode">HTTP status code.</param>
        /// <param name="message">Error message.</param>
        /// <param name="errorContent">Error content.</param>
        public ApiException(int errorCode, string message, string errorContent = null) : base(message)
        {
            this.ErrorCode = errorCode;
            this.ErrorContent = errorContent;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiException"/> class.
        /// </summary>
        protected ApiException(SerializationInfo info, StreamingContext context)
            : base(info, context)
        {
            this.ErrorCode = info.GetInt32(nameof(this.ErrorCode));
            this.ErrorContent = info.GetString(nameof(this.ErrorContent));
        }

        public override void GetObjectData(SerializationInfo info,
                                           StreamingContext context)
        {
            info.AddValue(nameof(this.ErrorCode), this.ErrorCode, typeof(int));
            info.AddValue(nameof(this.ErrorContent), this.ErrorContent, typeof(string));

            base.GetObjectData(info, context);
        }
    }
}
